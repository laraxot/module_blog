<?php

namespace Modules\Blog\Models;

//------- services ----
use Modules\LU\Models\User;
//----- models ---
use Modules\Xot\Traits\Updater;
//------- traits ---
use Illuminate\Database\Eloquent\Model;
use Modules\Rating\Models\Traits\RatingTrait;

//------- services ----

/**
 * Modules\Blog\Models\Comment
 *
 * @property int $id
 * @property string|null $post_type
 * @property int|null $post_id
 * @property string $lang
 * @property int|null $user_id
 * @property string $txt
 * @property string|null $created_by
 * @property string|null $updated_by
 * @property string|null $deleted_by
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property int|null $status
 * @property-read \Illuminate\Database\Eloquent\Collection|\Modules\Rating\Models\Rating[] $commentRatings
 * @property-read int|null $comment_ratings_count
 * @property-read mixed $created_date
 * @property-read Model|\Eloquent $linked
 * @property-read \Modules\Blog\Models\Profile|null $profile
 * @property-read \Illuminate\Database\Eloquent\Collection|\Modules\Rating\Models\Rating[] $ratingObjectives
 * @property-read int|null $rating_objectives_count
 * @property-read User|null $user
 * @method static \Illuminate\Database\Eloquent\Builder|Comment newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Comment newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Comment query()
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereAuthUserId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereCreatedBy($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereDeletedBy($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereLang($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment wherePostId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment wherePostType($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereTxt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Comment whereUpdatedBy($value)
 * @mixin \Eloquent
 * @property-read mixed $my_rating
 * @property-read mixed $ratings_avg
 * @property-read mixed $ratings_count
 * @method static \Illuminate\Database\Eloquent\Builder|Comment withRating()
 */
class Comment extends BaseModel{

    use RatingTrait;
    protected $fillable = ['id', 'post_id', 'post_type', 'related_type', 'user_id', 'txt', 'lang'];
    /*
    public function ratingObjectives()
    {
        return $this->hasMany(Rating::class, 'related_type', 'post_type');
    }
    */
    public function linked()
    {
        return $this->morphTo('post');
    }
    /*
    public function ratings()
    {
        return $this->linked->ratings();
    }
    */
    public function commentRatings()
    {
        //
        //
        //return $this->hasMany(RatingMorph::class, 'post_id', 'post_id')
        //        ->where('post_type',$this->post_type)
        //        ->where('user_id',$this->user_id);
        //
        //return $this->morphTo('post');//linked
        //return $this->morphOne(Image::class, 'post');

        //return $this->morphMany(Image::class, 'post');//uguale a morphone senza limit 1
        //return $this->morphToMany(Rating::class, 'post');
        //return $this->morphedByMany('App\Post', 'taggable');
        $related = Rating::class;
        $name = 'post';
        $pivot_table = 'rating_morph';
        $foreignPivotKey = 'post_id';
        $relatedPivotKey = 'related_id';
        $parentKey = 'id';
        $relatedKey = 'post_id';
        $inverse = false;

        return $this->morphToMany( //retituisce i voti che danno gli altri al commento
            $related,
            $name,
            $pivot_table,
            $foreignPivotKey,
            $relatedPivotKey,
            $parentKey,
            $relatedKey,
            $inverse
        );
    }

    public function profile()
    {
        return $this->hasOne(Profile::class, 'user_id', 'user_id');
    }

    public function user()
    {
        return $this->hasOne(User::class, 'user_id', 'user_id');
    }

    //--- mutators ---
    public function getCreatedDateAttribute()
    {
        return $this->created_at->diffForHumans();
    }

    //---- funzione tampone ---
    public function userName()
    {
        $user = $this->user;
        if (is_object($user)) {
            return $user->handle;
        }

        return 'Unknown';
    }


    public function morphRelated($related, $inverse = false, $table_key = null) {
        $name = 'post';
        $pivot = $this->getTableMorph($related, $inverse);
        $pivot_fields = app($pivot)->getFillable();
        if (null != $table_key) {
            $relation = $this->morphRelatedWithKey($related, $inverse, $table_key);
        } else {
            if ($inverse) {
                //$with = Panel::make()->get($this)->with();
                $relation = $this->morphedByMany($related, $name, $pivot);
            } else {
                //$with = Panel::make()->get($related)->with();

                $relation = $this->morphToMany($related, $name, $pivot);
            }
        }

        //return $relation;
        //dddx($with);

        return $relation->using($pivot)
            ->withPivot($pivot_fields)
            ->withTimestamps()
            ->with(['post']) //Eager
        ;
    }
}
