<?php

/*
 Line   Http\Controllers\SitewideSearchController.php
 ------ -----------------------------------------------------------------------------------------
  30     Call to static method allFiles() on an unknown class Modules\App\Blog\Controllers\File.
         ðŸ’¡ Learn more at https://phpstan.org/user-guide/discovering-symbols
  91     Class Modules\App\Blog\Controllers\Comment not found.
         ðŸ’¡ Learn more at https://phpstan.org/user-guide/discovering-symbols
  96     Call to static method has() on an unknown class Modules\App\Blog\Controllers\Arr.
         ðŸ’¡ Learn more at https://phpstan.org/user-guide/discovering-symbols
  97     Call to static method to() on an unknown class Modules\App\Blog\Controllers\URL.
         ðŸ’¡ Learn more at https://phpstan.org/user-guide/discovering-symbols
  100    Call to static method last() on an unknown class Modules\App\Blog\Controllers\Arr.
         ðŸ’¡ Learn more at https://phpstan.org/user-guide/discovering-symbols
  100    Call to static method plural() on an unknown class Modules\App\Blog\Controllers\Str.
         ðŸ’¡ Learn more at https://phpstan.org/user-guide/discovering-symbols
  101    Call to static method camel() on an unknown class Modules\App\Blog\Controllers\str.
         ðŸ’¡ Learn more at https://phpstan.org/user-guide/discovering-symbols
  101    Call to static method kebab() on an unknown class Modules\App\Blog\Controllers\Str.
         ðŸ’¡ Learn more at https://phpstan.org/user-guide/discovering-symbols
  103    Call to static method to() on an unknown class Modules\App\Blog\Controllers\URL.
         ðŸ’¡ Learn more at https://phpstan.org/user-guide/discovering-symbols
 ------ -----------------------------------------------------------------------------------------

 */

declare(strict_types=1);

namespace Modules\App\Blog\Controllers;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use SplFileInfo;

//---- services ---

/**
 * Class SitewideSearchController.
 */
class SitewideSearchController extends Controller {
    public const BUFFER = 10;

    private function modelNamespacePrefix() {
        return app()->getNamespace().'Models\\';
    }

    public function search(Request $request) {
        $keyword = $request->search;

        $toExclude = [];

        //SERVE A CARICARE TUTTI I MODELLI NELLA CARTELLA MODELLI
        $files = File::allFiles(app()->basePath().'/app/Models');

        $request = collect($files)->map(function (SplFileInfo $file) {
            $filename = $file->getRelativePathname();
            if ('.php' !== substr($filename, -4)) {
                return null;
            }

            return substr($filename, 0, -4);
        })->filter(function (?string $classname) use ($toExclude) {
            //CONTROLLA TUTTI I MODELLI UTILIZZANDO IL TRAIT DI Searchable
            if (null === $classname) {
                return false;
            }

            $reflection = new \ReflectionClass($this->modelNamespacePrefix().$classname);

            $isModel = $reflection->isSubclassOf(Model::class);

            $searchable = $reflection->hasMethod('search');

            return $isModel && $searchable && ! in_array($reflection->getName(), $toExclude, true);
        })->map(function ($classname) use ($keyword) {
            $model = app($this->modelNamespacePrefix().$classname);

            $fields = array_filter($model::SEARCHABLE_FIELDS, fn ($field) => 'id' !== $field);

            return $model::search($keyword)->get()->map(function ($modelRecord) use ($fields, $keyword, $classname) {
                $fieldsData = $modelRecord->only($fields);

                $serializedValues = collect($fieldsData)->join(' ');

                $searchPos = strpos(strtolower($serializedValues), strtolower($keyword));

                if (false !== $searchPos) {
                    $start = $searchPos - self::BUFFER;

                    $start = $start < 0 ? 0 : $start;

                    $lenght = strlen($keyword) + 2 * self::BUFFER;

                    $sliced = substr($serializedValues, $start, $lenght);

                    $shouldAddPrefix = $start > 0;
                    $shouldAddPrefix = ($start + $lenght) < strlen($serializedValues);

                    $sliced = $shouldAddPrefix ? '...'.$sliced : $sliced;
                    $sliced = $shouldAddPrefix ? $sliced.'...' : $sliced;
                }

                $modelRecord->setAttribute('match', $sliced ?? substr($serializedValues, 0, 2 * self::BUFFER).'...');
                $modelRecord->setAttribute('model', $classname);
                $modelRecord->setAttribute('view_link', $this->resolveModelViewLink($modelRecord));

                return $modelRecord;
            });
        })->flatten(1, );
    }

    private function resolveModelViewLink(Model $model) {
        $mapping = [
            Comment::class => '/comments/view/{id}',
        ];

        $modelClass = get_class($model);

        if (Arr::has($mapping, $modelClass)) {
            return URL::to(str_replace('{id}', $model->id, $mapping[$modelClass]));
        }

        $modelName = Str::plural(Arr::last(explode('\\', $modelClass)));
        $modelName = Str::kebab(str::camel($modelName));

        return URL::to('/', $modelName.'/'.$model->id);
    }
}